{"ast":null,"code":"import API from \"../../API\";\nimport { signInAction, signUpAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\nconst api = new API();\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\nexport const fetchUserFromLocalStorage = () => {\n  return async dispatch => {\n    const userJSON = localStorage.getItem(LOGIN_USER_KEY);\n\n    if (userJSON && userJSON.token !== \"\") {\n      dispatch(signInAction(JSON.parse(userJSON)));\n    }\n  };\n};\nexport const signUp = (username, email, password) => {\n  return async dispatch => {\n    // Validation\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert(\"Please fill out name, email, and password.\");\n      return false;\n    }\n\n    return api.signUp(username, email, password).then(user => {\n      dispatch(signUpAction(user));\n      localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n      dispatch(push(\"/\"));\n    }).catch(error => {\n      alert(\"Failed to connect API to add a post\");\n      console.log('error', username, email, password);\n    });\n  };\n};\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"Please fill out email and password.\");\n      return false;\n    }\n\n    return api.signIn(email, password).then(users => {\n      dispatch(signInAction(users));\n      localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n      dispatch(push(\"/\"));\n    }).catch(error => {\n      alert(\"Failed to connect API to add a post\");\n      console.log(error);\n    });\n  };\n};\nexport const signOut = () => {\n  return async dispatch => {\n    dispatch(signOutAction());\n    localStorage.removeItem(LOGIN_USER_KEY);\n    dispatch(push(\"/signin\"));\n  };\n};","map":{"version":3,"names":["API","signInAction","signUpAction","signOutAction","push","api","LOGIN_USER_KEY","fetchUserFromLocalStorage","dispatch","userJSON","localStorage","getItem","token","JSON","parse","signUp","username","email","password","alert","then","user","setItem","stringify","catch","error","console","log","signIn","users","signOut","removeItem"],"sources":["/Users/apple/Downloads/manikanta-drinks/frontend/src/redux/users/operations.js"],"sourcesContent":["import API from \"../../API\";\nimport { signInAction, signUpAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\n\nconst api = new API();\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\n\nexport const fetchUserFromLocalStorage = () => {\n  return async (dispatch) => {\n    const userJSON = localStorage.getItem(LOGIN_USER_KEY);\n    if (userJSON && userJSON.token !== \"\") {\n      dispatch(signInAction(JSON.parse(userJSON)));\n    }\n  };\n};\n\nexport const signUp = (username, email, password) => {\n  return async (dispatch) => {\n    // Validation\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert(\"Please fill out name, email, and password.\");\n      return false;\n    }\n\n    return api\n      .signUp(username, email, password)\n      .then((user) => {\n        dispatch(signUpAction(user));\n        localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n        dispatch(push(\"/\"));\n      })\n      .catch((error) => {\n        alert(\"Failed to connect API to add a post\");\n        console.log('error',username,email,password);\n      });\n  };\n};\n\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"Please fill out email and password.\");\n      return false;\n    }\n\n    return api\n      .signIn(email, password)\n      .then((users) => {\n        dispatch(signInAction(users));\n        localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n        dispatch(push(\"/\"));\n      })\n      .catch((error) => {\n        alert(\"Failed to connect API to add a post\");\n        console.log(error);\n      });\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    dispatch(signOutAction());\n    localStorage.removeItem(LOGIN_USER_KEY);\n    dispatch(push(\"/signin\"));\n  };\n};\n"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,aAArC,QAA0D,WAA1D;AACA,SAASC,IAAT,QAAqB,wBAArB;AAEA,MAAMC,GAAG,GAAG,IAAIL,GAAJ,EAAZ;AACA,MAAMM,cAAc,GAAG,gBAAvB;AAEA,OAAO,MAAMC,yBAAyB,GAAG,MAAM;EAC7C,OAAO,MAAOC,QAAP,IAAoB;IACzB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqBL,cAArB,CAAjB;;IACA,IAAIG,QAAQ,IAAIA,QAAQ,CAACG,KAAT,KAAmB,EAAnC,EAAuC;MACrCJ,QAAQ,CAACP,YAAY,CAACY,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAD,CAAb,CAAR;IACD;EACF,CALD;AAMD,CAPM;AASP,OAAO,MAAMM,MAAM,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAA+B;EACnD,OAAO,MAAOV,QAAP,IAAoB;IACzB;IACA,IAAIQ,QAAQ,KAAK,EAAb,IAAmBC,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAApD,EAAwD;MACtDC,KAAK,CAAC,4CAAD,CAAL;MACA,OAAO,KAAP;IACD;;IAED,OAAOd,GAAG,CACPU,MADI,CACGC,QADH,EACaC,KADb,EACoBC,QADpB,EAEJE,IAFI,CAEEC,IAAD,IAAU;MACdb,QAAQ,CAACN,YAAY,CAACmB,IAAD,CAAb,CAAR;MACAX,YAAY,CAACY,OAAb,CAAqBhB,cAArB,EAAqCO,IAAI,CAACU,SAAL,CAAeF,IAAf,CAArC;MACAb,QAAQ,CAACJ,IAAI,CAAC,GAAD,CAAL,CAAR;IACD,CANI,EAOJoB,KAPI,CAOGC,KAAD,IAAW;MAChBN,KAAK,CAAC,qCAAD,CAAL;MACAO,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBX,QAApB,EAA6BC,KAA7B,EAAmCC,QAAnC;IACD,CAVI,CAAP;EAWD,CAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMU,MAAM,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;EACzC,OAAO,MAAOV,QAAP,IAAoB;IACzB;IACA,IAAIS,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAAjC,EAAqC;MACnCC,KAAK,CAAC,qCAAD,CAAL;MACA,OAAO,KAAP;IACD;;IAED,OAAOd,GAAG,CACPuB,MADI,CACGX,KADH,EACUC,QADV,EAEJE,IAFI,CAEES,KAAD,IAAW;MACfrB,QAAQ,CAACP,YAAY,CAAC4B,KAAD,CAAb,CAAR;MACAnB,YAAY,CAACY,OAAb,CAAqBhB,cAArB,EAAqCO,IAAI,CAACU,SAAL,CAAeF,IAAf,CAArC;MACAb,QAAQ,CAACJ,IAAI,CAAC,GAAD,CAAL,CAAR;IACD,CANI,EAOJoB,KAPI,CAOGC,KAAD,IAAW;MAChBN,KAAK,CAAC,qCAAD,CAAL;MACAO,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD,CAVI,CAAP;EAWD,CAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMK,OAAO,GAAG,MAAM;EAC3B,OAAO,MAAOtB,QAAP,IAAoB;IACzBA,QAAQ,CAACL,aAAa,EAAd,CAAR;IACAO,YAAY,CAACqB,UAAb,CAAwBzB,cAAxB;IACAE,QAAQ,CAACJ,IAAI,CAAC,SAAD,CAAL,CAAR;EACD,CAJD;AAKD,CANM"},"metadata":{},"sourceType":"module"}